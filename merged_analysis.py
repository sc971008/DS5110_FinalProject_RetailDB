# -*- coding: utf-8 -*-
"""Merged Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1benpl0JZn7-YjeGiwyWUflHSf9F3iLOk
"""

import pandas as pd
import sqlite3
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load database and fetch Online_Transactions table
db_path = '/Retail.db'
conn = sqlite3.connect(db_path)

# Load Online_Transactions into a DataFrame
query_online_transactions = "SELECT * FROM Online_Transactions;"
online_transactions_df = pd.read_sql_query(query_online_transactions, conn)

"""# 1. Revenue Analysis (Top Categories/Products by Revenue)"""

#Top categories by revenue
top_categories_revenue = (
    online_transactions_df.groupby("ProductCategory")["Revenue"]
    .sum()
    .sort_values(ascending=False)
    .head(10)
    .reset_index()
)
print(top_categories_revenue.head(5))

# Top products by revenue
top_products_revenue = (
    online_transactions_df.groupby("ProductName")["Revenue"]
    .sum()
    .sort_values(ascending=False)
    .head(10)
    .reset_index()
)
print(top_products_revenue.head(10))

#Analysis of top revenue products
online = online_transactions_df

onlineRevSum = online.groupby("ProductSKU")["Revenue"].sum().reset_index()

onlineTotalRev = online["Revenue"].sum()

top10p = onlineRevSum.sort_values(by = "Revenue", ascending = False)[:10]["Revenue"].sum()/onlineTotalRev
print ("Top 10 products make up", top10p*100, "% of revenue")
top50p = onlineRevSum.sort_values(by = "Revenue", ascending = False)[:50]["Revenue"].sum()/onlineTotalRev
print ("Top 50 products make up", top50p*100, "% of revenue")

# Visualization for Top Categories by Revenue
plt.figure(figsize=(10, 6))
plt.barh(top_categories_revenue["ProductCategory"], top_categories_revenue["Revenue"], color="skyblue")
plt.xlabel("Revenue ($)", fontsize=12)
plt.ylabel("Product Category", fontsize=12)
plt.title("Top Categories by Revenue", fontsize=14)
plt.gca().invert_yaxis()
plt.show()

# Visualization for Top Products by Revenue
plt.figure(figsize=(10, 6))
plt.barh(top_products_revenue["ProductName"], top_products_revenue["Revenue"], color="lightgreen")
plt.xlabel("Revenue ($)", fontsize=12)
plt.ylabel("Product Name", fontsize=12)
plt.title("Top Products by Revenue", fontsize=14)
plt.gca().invert_yaxis()
plt.show()

"""# 2. Sales Trends Over Time

---


"""

# Convert TransactionDate to datetime
online_transactions_df["TransactionDate"] = pd.to_datetime(online_transactions_df["TransactionDate"])

# Aggregate revenue by month
sales_trends = (
    online_transactions_df.groupby(online_transactions_df["TransactionDate"].dt.to_period("M"))["Revenue"]
    .sum()
    .reset_index()
)
sales_trends["TransactionDate"] = sales_trends["TransactionDate"].astype(str)

print(sales_trends)

# Plot sales trends
plt.figure(figsize=(12, 6))
plt.plot(sales_trends["TransactionDate"], sales_trends["Revenue"], marker='o', linestyle='-')
plt.xticks(rotation=45)
plt.xlabel("Month", fontsize=12)
plt.ylabel("Revenue ($)", fontsize=12)
plt.title("Sales Trends Over Time", fontsize=14)
plt.grid()
plt.show()

"""# 3. Tax and Delivery Cost Impact"""

# Calculate percentage impact of Tax and Delivery on Revenue
online_transactions_df["Tax_Impact"] = (online_transactions_df["Tax"] / online_transactions_df["Revenue"]) * 100
online_transactions_df["Delivery_Impact"] = (online_transactions_df["Delivery"] / online_transactions_df["Revenue"]) * 100

# Average tax and delivery cost impact by category
impact_by_category = online_transactions_df.groupby("ProductCategory")[["Tax_Impact", "Delivery_Impact"]].mean().reset_index()
print(impact_by_category)

# Plot tax and delivery impact
impact_by_category.set_index("ProductCategory").plot(
    kind="bar", figsize=(10, 6), color=["skyblue", "lightgreen"]
)
plt.xlabel("Product Category", fontsize=12)
plt.ylabel("Average Impact (%)", fontsize=12)
plt.title("Tax and Delivery Cost Impact by Category", fontsize=14)
plt.legend(["Tax Impact (%)", "Delivery Impact (%)"], loc="upper right")
plt.show()

"""#4. Profitability Analysis"""

# Calculate profitability
online_transactions_df["Profit"] = (
    online_transactions_df["Revenue"] - online_transactions_df["Tax"] - online_transactions_df["Delivery"]
)

# Aggregate profit by category
profit_by_category = (
    online_transactions_df.groupby("ProductCategory")["Profit"]
    .sum()
    .sort_values(ascending=False)
    .reset_index()
)

# Print results
print("Profitability by Product Category:")
print(profit_by_category)

plt.figure(figsize=(10, 6))
sns.barplot(
    x="Profit",
    y="ProductCategory",
    data=profit_by_category,
    palette="viridis",
    hue="ProductCategory",
    dodge=False  # Ensures single bars per category
)
plt.legend([],[], frameon=False)  # Suppress the legend
plt.xlabel("Profit ($)", fontsize=12)
plt.ylabel("Product Category", fontsize=12)
plt.title("Profitability by Product Category", fontsize=14)
plt.show()

"""#5.High-Tax Impact Products

"""

# Calculate tax percentage
online_transactions_df["Tax_Percentage"] = (online_transactions_df["Tax"] / online_transactions_df["Revenue"]) * 100

# Top products by tax percentage
high_tax_products = (
    online_transactions_df.groupby("ProductName")["Tax_Percentage"]
    .mean()
    .sort_values(ascending=False)
    .head(10)
    .reset_index()
)

# Print results
print("Top 10 Products by Tax Percentage:")
print(high_tax_products)

plt.figure(figsize=(10, 6))
sns.barplot(
    x="Tax_Percentage",
    y="ProductName",
    data=high_tax_products,
    palette="mako",
    hue="ProductName",
    dodge=False
)
plt.legend([],[], frameon=False)
plt.xlabel("Tax Impact (%)", fontsize=12)
plt.ylabel("Product Name", fontsize=12)
plt.title("Top 10 Products by Tax Impact", fontsize=14)
plt.show()

"""#6. Revenue by Day of the Week"""

# Extract day of the week
online_transactions_df["DayOfWeek"] = online_transactions_df["TransactionDate"].dt.day_name()

# Revenue by day of the week
revenue_by_day = (
    online_transactions_df.groupby("DayOfWeek")["Revenue"]
    .sum()
    .sort_values(ascending=False)
    .reset_index()
)

# Print results
print("Revenue by Day of the Week:")
print(revenue_by_day)

plt.figure(figsize=(8, 6))
sns.barplot(
    x="Revenue",
    y="DayOfWeek",
    data=revenue_by_day,
    palette="coolwarm",
    hue="DayOfWeek",
    dodge=False
)
plt.legend([],[], frameon=False)
plt.xlabel("Revenue ($)", fontsize=12)
plt.ylabel("Day of the Week", fontsize=12)
plt.title("Revenue Trends by Day of the Week", fontsize=14)
plt.show()

plt.figure(figsize=(10, 6))
sns.violinplot(
    x="DayOfWeek",
    y="Revenue",
    data=online_transactions_df,

)
plt.xlabel("Day of the Week", fontsize=12)
plt.ylabel("Revenue ($)", fontsize=12)
plt.title("Revenue Distribution by Day of the Week", fontsize=14)
plt.grid(axis="y")
plt.xticks(rotation=45)
plt.show()

"""Analysis of Item Popularity"""

#Analysis of Sales Volumes and top 10 most popular items sold
onlineQtySum = online.groupby(["ProductSKU","ProductName"])["Qty"].sum().reset_index()

onlineTotalQty = online["Qty"].sum()

top10p = onlineQtySum.sort_values(by = "Qty", ascending = False)[:10]["Qty"].sum()/onlineTotalQty
print ("Top 10 products make up", top10p*100, "% of sales volume")
top50p = onlineQtySum.sort_values(by = "Qty", ascending = False)[:50]["Qty"].sum()/onlineTotalQty
print ("Top 50 products make up", top50p*100, "% of sales volume")

#Shows top 10 most popular items
top10Qty = onlineQtySum.sort_values(by = "Qty", ascending = False)[:10]
top10Qty

# Visualization for Top Products by Sales Volume
plt.figure(figsize=(10, 6))
plt.barh(top10Qty["ProductName"], top10Qty["Qty"], color="skyblue")
plt.xlabel("Sales Volume", fontsize=12)
plt.ylabel("Product Name", fontsize=12)
plt.title("Top Products by Sales Volume", fontsize=14)
plt.gca().invert_yaxis()
plt.show()

